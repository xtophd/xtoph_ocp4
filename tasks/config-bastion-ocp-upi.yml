


- delegate_to: "{{ xtoph_ocp4.bastion.host_fqdn }}"
  run_once: true
  block:

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : download ocp software [SRC: {{ xtoph_ocp4.ocp_assets.url }}]"
        environment:
          http_proxy:  "{{ xtoph_ocp4.ocp.http_proxy| default('') }}"
          https_proxy: "{{ xtoph_ocp4.ocp.https_proxy| default('') }}"
        get_url:
          url: "{{ xtoph_ocp4.ocp_assets.url }}/{{ item }}"
          dest: "/usr/local/src/{{ item }}"
          mode: "0644"
        with_items:
          - "{{ xtoph_ocp4.ocp_assets.install_tar }}"
        register: openshift_download
        until: openshift_download is not failed
        retries: 5
      
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : unpack ocp software"
        shell:
          cmd: |
            cd /usr/local/bin
            tar zxvf /usr/local/src/{{ item }}
        with_items:
          - "{{ xtoph_ocp4.ocp_assets.install_tar }}"
      
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : install podman to access coreos-installer and customize the ISOs"
        yum: 
          name: podman 
          state: installed

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : pull fresh copy of coreos-installer:release"
        throttle: "{{ xtoph_ocp4._throttle | int  }}"
        shell:
          cmd: |
            podman pull quay.io/coreos/coreos-installer:release 
        retries: 5
        delay: 3

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : install bash-completion to make life on the cli glorious"
        yum: 
          name: bash-completion
          state: installed

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : configure openshift bash completion"
        shell:
          cmd: |
            /usr/local/bin/openshift-install completion bash >> /etc/bash_completion.d/openshift-install_completion

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : Clean-up matchbox ignition directory"
        shell:
          cmd: |
            if [[ -d "/var/lib/matchbox/ignition/" ]] ; then rm -f /var/lib/matchbox/ignition/* ; fi
  
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : load pull secret"
        shell: cat {{ xtoph_ocp4.ocp.creds_dir }}/pull-secret.txt
        register: pull_secret
    
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : load ssh key"
        shell: cat /root/.ssh/id_rsa.pub
        register: ssh_key
  
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : deploy install-config.yml using SDN [OCP < 4.9]"
        vars:
          - p_pullSecret:   "{{ pull_secret.stdout |quote }}"
          - p_sshKey:       "{{ ssh_key.stdout |quote }}"
          - p_clusterName:  "{{ xtoph_ocp4.ocp.clustername }}"
          - p_domain:       "{{ xtoph_ocp4.ocp.basedomain }}"
          - p_http_proxy:   "{{ xtoph_ocp4.bastion.squid_http_url if xtoph_ocp4.bastion.squid else xtoph_ocp4.ocp.http_proxy|default('') }}"
          - p_https_proxy:  "{{ xtoph_ocp4.bastion.squid_https_url if xtoph_ocp4.bastion.squid else xtoph_ocp4.ocp.https_proxy|default('') }}"
          - p_no_proxy:     "{{ g_no_proxy | default ('') }}"
          - p_blkdev:       "{{ xtoph_ocp4.rhcos.blk_dev }}"
        template:
          src: "ocp-install-config-sdn.j2"
          dest: "{{ xtoph_ocp4.ocp.creds_dir }}/install-config.yaml"
          owner: root
          group: root
          mode: 644
        when: xtoph_ocp4.ocp.version is version('4.9',operator='<')

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : deploy install-config.yml using OVN [OCP >= 4.9]"
        vars:
          - p_pullSecret:   "{{ pull_secret.stdout |quote }}"
          - p_sshKey:       "{{ ssh_key.stdout |quote }}"
          - p_clusterName:  "{{ xtoph_ocp4.ocp.clustername }}"
          - p_domain:       "{{ xtoph_ocp4.ocp.basedomain }}"
          - p_http_proxy:   "{{ xtoph_ocp4.bastion.squid_http_url if xtoph_ocp4.bastion.squid else xtoph_ocp4.ocp.http_proxy|default('') }}"
          - p_https_proxy:  "{{ xtoph_ocp4.bastion.squid_https_url if xtoph_ocp4.bastion.squid else xtoph_ocp4.ocp.https_proxy|default('') }}"
          - p_no_proxy:     "{{ g_no_proxy | default ('') }}"
          - p_blkdev:       "{{ xtoph_ocp4.rhcos.blk_dev }}"
        template:
          src: "ocp-install-config-ovn.j2"
          dest: "{{ xtoph_ocp4.ocp.creds_dir }}/install-config.yaml"
          owner: root
          group: root
          mode: 644
        when: xtoph_ocp4.ocp.version is version('4.9',operator='>=')
    
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : Create a backup of the install-config.yaml"
        shell:
          cmd: |
            cp "{{ xtoph_ocp4.ocp.creds_dir }}/install-config.yaml" "{{ xtoph_ocp4.ocp.creds_dir }}/install-config.bak"
  
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : create STANDARD ignition files"
        shell:
          cmd: |
            cd {{ xtoph_ocp4.ocp.creds_dir }}
            /usr/local/bin/openshift-install --dir={{ xtoph_ocp4.ocp.creds_dir }} create ignition-configs
        when: xtoph_ocp4.ocp.sno == false 
          
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : create SNO ignition files"
        shell:
          cmd: |
            cd {{ xtoph_ocp4.ocp.creds_dir }}
            /usr/local/bin/openshift-install --dir={{ xtoph_ocp4.ocp.creds_dir }} create single-node-ignition-config
        when: xtoph_ocp4.ocp.sno == true
          
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : rename signle-node-ignition-config and put copy in assests dir"
        shell:
          cmd: |
            cd {{ xtoph_ocp4.ocp.creds_dir }}
            mv bootstrap-in-place-for-live-iso.ign sno.ign
            cp sno.ign /var/lib/matchbox/assets/
        when: xtoph_ocp4.ocp.sno == true

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : copy ignition files"
        shell:
          cmd: |
            cp {{ xtoph_ocp4.ocp.creds_dir }}/*.ign /var/lib/matchbox/ignition/
    
      - name: "xtoph_ocp4 : config-bastion-ocp-upi : fix ignition file permissions"
        shell:
          cmd: |
            chown matchbox.matchbox /var/lib/matchbox/ignition/*



      ##
      ##    ISO CUSTOMIZATION
      ##
      ##    2024-08 switching away from using templates (ocp v4.7+) and the iso 
      ##            utilities formerly used to build the custom ISO images 
      ##            (config-bastion-iso.yml).  now we use the coreos-installer 
      ##            and it's options to do customizations incrementally
      ##
      ##
      ##    usb-storage.delay          linux kernel option used to prevent usb storage from
      ##                               posting before raid cards.  averts issue where BMC virtual
      ##                               device winds up as /dev/sda (normally the booot/install device)
      ##
      ##    coreos.inst                install coreos
      ##    coreos.inst.insecure       allow http hosted images (don't require https)
      ##    coreos.inst.install_dev    block device to be used for installation
      ##    coreos.inst.ignition_url   url which hosts the ignition files
      ##    
      ##
      ##
      ##
      ##
      ##


      - run_once: false
        block:

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : DEBUG: ISO customization network parameters"
              debug:
                msg:
                - "ISO Target        = {{ t_dest_iso }}"
                - "USB-STORAGE.DELAY = {{ xtoph_ocp4.rhcos.usb_delay }}"
                - "NIC Mode          = {{ xtoph_ocp4.rhcos.nic_mode }}" 
                - "DNS               = {{ t_dns }}"
                - "RHCOS NET DEV     = {{ t_dev }}"
                - "RHCOS BLK DEV     = {{ xtoph_ocp4.rhcos.blk_dev }}" 
                - "RHCOS DHCP        = {{ t_ip_dhcp }}"
                - "RHCOS STATIC      = {{ t_ip_static }}"
                - "RHCOS IGN URL     = {{ t_ignition_url }}"

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : clone ISO source to node specific ISO images"
              throttle: "{{ xtoph_ocp4._throttle | int  }}"
              shell:
                cmd: |
                  cp "{{t_assets_dir}}/{{ t_src_iso }}" "{{t_assets_dir}}/{{ t_dest_iso }}"
              when:  inventory_hostname in xtoph_ocp4._cluster_bootstrap + xtoph_ocp4._cluster_masters + xtoph_ocp4._cluster_workers + xtoph_ocp4._cluster_sno

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : update RHCOS ISO image permissions"
              file:
                path: "{{t_assets_dir}}/{{ t_dest_iso }}"
                mode: "0644"
                owner: matchbox
                group: matchbox
                state: file

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize RHCOS ISO image with kernels args for USB-STORAGE.DELAY"
              throttle: "{{ xtoph_ocp4._throttle | int  }}"
              shell:
                cmd: |
                  cd {{t_assets_dir}}
                  podman run --privileged --rm \
                      -v /dev:/dev -v /run/udev:/run/udev -v {{t_assets_dir}}:/data \
                      -w /data quay.io/coreos/coreos-installer:release \
                      iso kargs modify -a "usb-storage.delay_use={{xtoph_ocp4.rhcos.usb_delay}}" {{ t_dest_iso }}

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize RHCOS ISO image with kernel args for DHCP IP"
              throttle: "{{ xtoph_ocp4._throttle | int  }}"
              shell:
                cmd: |
                  cd {{t_assets_dir}}
                  podman run --privileged --rm \
                      -v /dev:/dev -v /run/udev:/run/udev -v {{t_assets_dir}}:/data \
                      -w /data quay.io/coreos/coreos-installer:release \
                      iso kargs modify -a "ip={{ t_ip_dhcp }}" {{ t_dest_iso }}
              when:
                - xtoph_ocp4.rhcos.nic_mode != "static"

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize RHCOS ISO image with kernel args for STATIC IP"
              throttle: "{{ xtoph_ocp4._throttle | int  }}"
              shell:
                cmd: |
                  cd {{t_assets_dir}}
                  podman run --privileged --rm \
                      -v /dev:/dev -v /run/udev:/run/udev -v {{t_assets_dir}}:/data \
                      -w /data quay.io/coreos/coreos-installer:release \
                      iso kargs modify -a "ip={{ t_ip_static }}" {{ t_dest_iso }}
              when:
                - xtoph_ocp4.rhcos.nic_mode == "static"

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize RHCOS ISO image with kernel args for BONDED NICs"
              throttle: "{{ xtoph_ocp4._throttle | int  }}"
              shell:
                cmd: |
                  cd {{t_assets_dir}}
                  podman run --privileged --rm \
                      -v /dev:/dev -v /run/udev:/run/udev -v {{t_assets_dir}}:/data \
                      -w /data quay.io/coreos/coreos-installer:release \
                      iso kargs modify -a "bond={{xtoph_ocp4.rhcos.bond_dev}}" {{ t_dest_iso }}
              when:
                - xtoph_ocp4.rhcos.bond_dev != ""

            - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize RHCOS ISO image [coreos.inst defaults]"
              shell:
                cmd: |
                  cd {{t_assets_dir}}
                  podman run --privileged --rm \
                      -v /dev:/dev -v /run/udev:/run/udev -v {{t_assets_dir}}:/data \
                      -w /data quay.io/coreos/coreos-installer:release \
                      iso kargs modify \
                        -a "coreos.inst.insecure=yes" \
                        -a "coreos.inst.install_dev={{xtoph_ocp4.rhcos.blk_dev}}" \
                        -a "coreos.inst.ignition_url={{t_ignition_url}}" \
                      {{ t_dest_iso }}

            ##
            ##    We don't have to worry about special options for any 
            ##    versions < 4.7 (those are handled by config-bastion-legacy-iso)
            ##    
            ##      example: v4.2 requires a different image name for bios v. eufi systems  
            ##               v4.2-4.6 require image_url
            ##               v4.2-4.6 require coreos.inst=yes
            ##    

        vars:
          - t_assets_dir:    "/var/lib/matchbox/assets"
          - t_dest_iso:      "{{ xtoph_ocp4.ocp.clustername }}-{{ inventory_hostname_short }}.iso"
          - t_src_iso:       "{{ xtoph_ocp4.rhcos_assets.iso }}"

          - t_dns:           "{{ xtoph_ocp4.bastion.host_ip if xtoph_ocp4.bastion.dns == true else xtoph_ocp4.network.nameserver }}"
          - t_dev:           "{{ xtoph_ocp4.rhcos.nic_dev | regex_replace('^(.*):.*','\\1') }}"
          - t_ip_dhcp:       "{{ t_dev }}:dhcp"
          - t_ip_static:     "{{ h_pubIP  }}::{{ xtoph_ocp4.network.gateway }}:{{ xtoph_ocp4.network.gateway }}:{{ inventory_hostname }}:{{ t_dev }}:none:{{ t_dns }}"

          - t_ignition_url: "http://{{xtoph_ocp4.bastion.host_ip}}:{{xtoph_ocp4.bastion.matchbox_port}}/ignition?mac={{xtoph_ocp4.rhcos.nic_mac}}"

        when:
          - xtoph_ocp4.ocp.version is version('4.7',operator='>=')
          - inventory_hostname in xtoph_ocp4._cluster_bootstrap + xtoph_ocp4._cluster_masters + xtoph_ocp4._cluster_workers + xtoph_ocp4._cluster_sno


      - name: "xtoph_ocp4 : config-bastion-ocp-upi : customize SNO ISO image with embedded ignition"
        run_once: false
        vars:
          - t_dest_iso:    "{{ xtoph_ocp4.ocp.clustername }}-{{ inventory_hostname_short }}.iso"
        shell:
          cmd: |
            cd /var/lib/matchbox/assets/
            podman run --privileged --rm \
                -v /dev:/dev -v /run/udev:/run/udev -v /var/lib/matchbox/assets:/data \
                -w /data quay.io/coreos/coreos-installer:release \
                iso ignition embed -fi sno.ign {{ t_dest_iso }}
        when:
          - xtoph_ocp4.ocp.sno == true
          - inventory_hostname in xtoph_ocp4._cluster_sno

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : cleanup signle-node-ignition-config in assests dir"
        shell:
          cmd: |
            rm -f  /var/lib/matchbox/assets/iso.ign
        when: xtoph_ocp4.ocp.sno == true

      ## Maybe matchbox needs a refresh of content updates, so just to be safe... restart

      - name: "xtoph_ocp4 : config-bastion-ocp-upi : restart matchbox services"
        service: name="{{ item }}" state=restarted enabled=yes daemon_reload=yes
        with_items:
          - "matchbox"
        when: xtoph_ocp4.bastion.matchbox == true


  #
  #    Only execute tasks if workshop_lock == false
  #

  when:
    - workshop_lock == false

      

