


#
#    Summary:
#
#      This playbook configures ISOs to support UEFI HTTP installations of RHCOS
#   
#      Current dhcp model should follow:
#
#      (A) If class is UEFI
#            If UEFI based, we boot from matchbox 
#            If UEFI based, we chain load with ipxe.efi and try again as iUEFI
#            If UEFI based, we chain load with undionly and try again as iUEFI
#
#      (B) If class is HTTP
#            Send URL to customized ISO
#
#      This playbook is focused on "setting up" (B)
#      This playbook must run after  bastion-matchbox
#      This playbook must run before bastion-dhcp
#



- delegate_to: "{{ xtoph_ocp4.bastion.host_fqdn }}"
  block:

      - name: "xtoph_ocp4 : config-bastion-iso : package installation"
        run_once: true
        yum: name=genisoimage,xorriso state=installed

      - name: "xtoph_ocp4 : config-bastion-iso : clean-up tmp directory {{ t_tmp }}"
        run_once: true
        shell:
          cmd: |
            if [[ -d "{{ t_tmp }}" ]] ; then rm -rf {{ t_tmp }} ; fi


    
      - name: "xtoph_ocp4 : config-bastion-iso : create fresh iso work directory for each host"
        file: 
          path="{{ t_tmp_subdir }}" 
          mode="0755" 
          state=directory
    
      - name: "xtoph_ocp4 : config-bastion-iso : clone ISO source to temp workspace"
        throttle: "{{ xtoph_ocp4._throttle | int  }}"
        shell:
          cmd: |
            xorriso -osirrox on -indev "{{ t_src_iso }}" -extract / "{{ t_tmp_subdir }}"
 
      #
      #    NOTE:  because I am using http (not https), 
      #           I need to add "coreos.inst.insecure=yes" 
      #           to my list of kernel options
      #
    
      - name: "xtoph_ocp4 : config-bastion-iso : customize isolinux configs"
        replace:
          path: "{{ t_tmp_subdir }}/isolinux/isolinux.cfg"
          regexp: '(\s+)append(\s+.*)?$'
          replace: >
              \1append\2 rd.neednet=1 
              usb-storage.delay_use={{t_usbdelay}} 
              ip={{ t_network }} 
              {% if t_bond != "" %}bond={{ t_bond }}{% endif %}
              "coreos.inst=yes" 
              "coreos.inst.insecure=yes" 
              "coreos.inst.install_dev={{ t_storage }}" 
              "coreos.inst.ignition_url=http://{{ t_addr }}:{{ t_port }}/ignition?mac={{ t_mac }}"

      - name: "xtoph_ocp4 : config-bastion-iso : customize grub configs"
        replace:
          path: "{{ t_tmp_subdir }}/EFI/redhat/grub.cfg"
          regexp: '(\s+)linux(\s+.*)?$'
          replace: >
              \1linux\2 rd.neednet=1 
              usb-storage.delay_use={{t_usbdelay}} 
              ip={{ t_network }} 
              {% if t_bond != "" %}bond={{ t_bond }}{% endif %}
              "coreos.inst=yes" 
              "coreos.inst.insecure=yes" 
              "coreos.inst.install_dev={{ t_storage }}" 
              "coreos.inst.ignition_url=http://{{ t_addr }}:{{ t_port }}/ignition?mac={{ t_mac }}"

      - name: "xtoph_ocp4 : config-bastion-iso : preserve ISO volume id"
        shell:
          cmd: |
            isoinfo -d -i {{ t_src_iso }} | grep 'Volume id:' | sed -e 's/Volume id: //g'
        register: isoinfo

      - name: "xtoph_ocp4 : config-bastion-iso : for each host generate custom iso image"
        throttle: "{{ xtoph_ocp4._throttle | int  }}"
        shell:
          cmd: |
            cd {{ t_tmp_subdir }} 
            genisoimage -U -r -v -T -J -joliet-long        \
                        -V      "{{ isoinfo.stdout  }}"         \
                        -volset "{{ isoinfo.stdout  }}"         \
                        -A      "{{ isoinfo.stdout  }}"         \
                        -b      isolinux/isolinux.bin      \
                        -c      isolinux/boot.cat          \
                        -no-emul-boot                      \
                        -boot-load-size 4                  \
                        -boot-info-table                   \
                        -eltorito-alt-boot                 \
                        -e images/efiboot.img              \
                        -no-emul-boot                      \
                        -o {{ t_dest_iso }} . 

      - name: "xtoph_ocp4 : config-bastion-iso : update iso file permissions"
        file: 
          path: "{{ t_dest_iso }}"
          mode: "0644" 
          owner: matchbox
          group: matchbox
          state: file 

      - name: "xtoph_ocp4 : config-bastion-iso : clean-up temp directory {{ t_tmp }}"
        run_once: true
        shell:
          cmd: |
            if [[ -d "{{ t_tmp }}" ]] ; then rm -rf "{{ t_tmp }}" ; fi
        when: xtoph_ocp4._cleanup == True



  vars:
    - t_tmp:         "/var/tmp/{{ xtoph_ocp4.ocp.clustername }}/iso"
    - t_tmp_subdir:  "{{ t_tmp }}/{{ inventory_hostname_short }}"
    - t_name:        "{{ inventory_hostname_short }}"
    - t_addr:        "{{ xtoph_ocp4.bastion.host_ip }}"
    - t_port:        "{{ xtoph_ocp4.bastion.matchbox_port }}"
    - t_clustername: "{{ xtoph_ocp4.ocp.clustername }}"
    - t_bond:        "{{ xtoph_ocp4.rhcos.bond_dev }}"
    - t_mac:         "{{ xtoph_ocp4.rhcos.nic_mac }}"
    - t_network:     "{{ xtoph_ocp4.rhcos.nic_dev }}"
    - t_storage:     "{{ xtoph_ocp4.rhcos.blk_dev }}"
    - t_usbdelay:    "{{ xtoph_ocp4.rhcos.usb_delay }}"
    - t_src_iso:     "/var/lib/matchbox/assets/{{ xtoph_ocp4.rhcos_assets.iso }}"
    - t_dest_iso:    "/var/lib/matchbox/assets/{{ xtoph_ocp4.ocp.clustername }}-{{ inventory_hostname_short }}.iso"




