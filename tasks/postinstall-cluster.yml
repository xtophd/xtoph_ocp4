
- delegate_to: "{{ xtoph_ocp4.bastion.host_fqdn }}"
  throttle: 1
  block:

      #
      #    Load the ocm offline tokens into vars
      #

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) load ocm offline token"
        shell: cat {{ xtoph_ocp4.ocp.creds_dir }}/ocm-token.txt
        register: ocm_token

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) wait for nodes"
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                list hosts | grep {{ inventory_hostname }} | tr '[+\-\|]'  '[  ,]' | sed -e 's| *, *|,|g' -e 's|^,||g' -e 's|,$||g' | cut -d , -f 5
        register: aicli_node_status
        until: aicli_node_status.stdout == "known" or aicli_node_status.stdout == "installed"
        delay: 5
        retries: 600
       
      - name: "xtoph_ocp4 : postinstall-cluster : (AI) set node roles for workers"
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                update host {{ inventory_hostname }} -P role=worker
        when: 
          - aicli_node_status.stdout == "known"
          - inventory_hostname in xtoph_ocp4._cluster_workers
       
      - name: "xtoph_ocp4 : postinstall-cluster : (AI) set node roles for masters"
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                update host {{ inventory_hostname }} -P role=master
        when:
          - aicli_node_status.stdout == "known"
          - inventory_hostname in xtoph_ocp4._cluster_masters
       
      - name: "xtoph_ocp4 : postinstall-cluster : (AI) wait for cluster status == ready | installed"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                info cluster {{ xtoph_ocp4.ocp.clustername }} | grep '^status:' | sed -e 's|^status: ||g'
        register: aicli_cluster_status
        until: aicli_cluster_status.stdout == "ready" or aicli_cluster_status.stdout == "installed"
        delay: 5
        retries: 600
       
      - name: "xtoph_ocp4 : postinstall-cluster : (AI) start cluster build"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                start cluster {{ xtoph_ocp4.ocp.clustername }}
        when: aicli_cluster_status.stdout == "ready"

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) wait for cluster install preparations to complete"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }} -o json \
                info cluster {{ xtoph_ocp4.ocp.clustername }} | jq '.progress.preparing_for_installation_stage_percentage'
        register: aicli_status
        until: aicli_status.stdout == "100"
        delay: 5
        retries: 600
        when: aicli_cluster_status.stdout == "ready"

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) wait for cluster installation to complete"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }} -o json \
                info cluster {{ xtoph_ocp4.ocp.clustername }} | jq '.progress.installing_stage_percentage'
        register: aicli_status
        until: aicli_status.stdout == "100"
        delay: 5
        retries: 600
        when: aicli_cluster_status.stdout == "ready"



      #
      #    Cleanup ssh keys again since AI goes through 
      #    a reboot which changes host keys post the 
      #    initial discovery image
      #    
      #
      #    NOTE:  the technique of adding '| true' just ensures
      #           that regardless of what ssh-keygen finds, the
      #           result is 'true'.  This should remove the red
      #           errors we ignore from the output
      #
    
      - name: "xtoph_ocp4 : postinstall-cluster : (AI) cleanup ssh keys in knownhosts"
        vars:
          - p_item:      "{{ inventory_hostname }}"
          - p_name:      "{{ inventory_hostname_short }}"
          - p_addr:      "{{ h_pubIP }}"
          - p_fqdn:      "{{ p_name }}.{{ xtoph_ocp4.ocp.cluster_fqdn }}"
          - p_domain:    "{{ xtoph_ocp4.ocp.basedomain }}"
          - p_cluster:   "{{ xtoph_ocp4.ocp.clustername }}"
        shell:
          cmd: |
            ssh-keygen -R "{{ p_item }}" | true
            ssh-keygen -R "{{ p_name }}" | true
            ssh-keygen -R "{{ p_fqdn }}" | true
            ssh-keygen -R "{{ p_addr }}" | true
        ignore_errors: yes

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) add new ssh keys for node"
        vars:
          - p_item:      "{{ inventory_hostname }}"
          - p_name:      "{{ inventory_hostname_short }}"
          - p_addr:      "{{ h_pubIP }}"
          - p_fqdn:      "{{ p_name }}.{{ xtoph_ocp4.ocp.cluster_fqdn }}"
          - p_domain:    "{{ xtoph_ocp4.ocp.basedomain }}"
          - p_cluster:   "{{ xtoph_ocp4.ocp.clustername }}"
        shell:
          cmd: |
            ssh-keyscan "{{ p_name }}" >> /root/.ssh/known_hosts
            ssh-keyscan "{{ p_fqdn }}" >> /root/.ssh/known_hosts
        ignore_errors: yes

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) fetch kubeconfig"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                download kubeconfig {{ xtoph_ocp4.ocp.clustername }} --path {{ xtoph_ocp4.ocp.creds_dir }}/auth
        delay: 5
        retries: 600

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) rename kubeconfig"
        run_once: true
        shell:
          cmd: |
            mv -f {{ xtoph_ocp4.ocp.creds_dir }}/auth/kubeconfig.{{ xtoph_ocp4.ocp.clustername }} \
                  {{ xtoph_ocp4.ocp.creds_dir }}/auth/kubeconfig

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) fetch kubeadmin password"
        run_once: true
        shell:
          cmd: |
            aicli --offlinetoken {{ ocm_token.stdout|quote }}      \
                download kubeadmin-password {{ xtoph_ocp4.ocp.clustername }} --path {{ xtoph_ocp4.ocp.creds_dir }}/auth
        delay: 5
        retries: 600

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) rename kubeconfig"
        run_once: true
        shell:
          cmd: |
            mv -f {{ xtoph_ocp4.ocp.creds_dir }}/auth/kubeadmin-password.{{ xtoph_ocp4.ocp.clustername }} \
                  {{ xtoph_ocp4.ocp.creds_dir }}/auth/kubeadmin-password

      - name: "xtoph_ocp4 : postinstall-cluster : (AI) wait for availability of api"
        run_once: true
        wait_for:
          host: "{{ xtoph_ocp4.ocp.vip_api }}"
          connect_timeout: 5
          delay: 3
          port: 6443
          sleep: 5
          state: started
          timeout: 1800
        when: aicli_cluster_status.stdout == "ready"

  when: xtoph_ocp4.ocp.provisioner == "ai"

#    - xtoph_ocp4.bastion.assisted_installer is defined and
#      xtoph_ocp4.bastion.assisted_installer == true and
#      xtoph_ocp4.ocp.provisioner == "ai"
      



- delegate_to: "{{ xtoph_ocp4.bastion.host_fqdn }}"
  throttle: 1
  block:

      ##
      ##    For every node in cluster: 
      ##      until ( node == ready )
      ##       scan for pending CSR's
      ##       approve pending CSR's
      ##       sleep
      ##

      - name: "xtoph_ocp4 : postinstall-cluster : watch until all nodes 'Ready', approve CSRs as needed"
        shell:
          cmd: |
            export KUBECONFIG={{ workshop_extras.ocp_creds_dir }}/auth/kubeconfig
            if [[ `{{ oc_cmd }} get node --no-headers {{ inventory_hostname_short }}.{{ xtoph_ocp4.ocp.cluster_fqdn }} | awk '{print $2}'` == "Ready" ]] ; then
              exit 0
            else
              for i in `{{ oc_cmd }} get csr | grep -i pending | awk '{print $1}'`; do 
                {{ oc_cmd }} adm certificate approve $i
                sleep 1
              done
              exit 1
            fi 
        register: result
        until:  result.rc == 0
        retries: 600
        delay: 5



      ##
      ##    For Openshift v4.2 we have to set the registry operator 
      ##    to managed in order for installation to complete with
      ##    all operator availability = true
      ##



      - name: "xtoph_ocp4 : postinstall-cluster : wait for configs.imageregistry for OCP < v4.3, approve CSRs as needed"
        run_once: true
        shell:
          cmd: |
            export KUBECONFIG={{ workshop_extras.ocp_creds_dir }}/auth/kubeconfig
            {{ oc_cmd }} get configs.imageregistry.operator.openshift.io/cluster 2>/dev/null
            if [[ $? != 0 ]]; then 
              for i in `{{ oc_cmd }} get csr | grep -i pending | awk '{print $1}'`; do 
                {{ oc_cmd }} adm certificate approve $i
                sleep 1
              done
              exit 1 
            else 
              exit 0 
            fi
        register: result
        until:  result.rc == 0
        retries: 600
        delay: 5
        when: 
          - xtoph_ocp4.ocp.version is version('4.3',operator='<')

      - name: "xtoph_ocp4 : postinstall-cluster : config NFS PV/PVC and set image-registry to managed for OCP < v4.3"
        run_once: true
        shell:
          cmd: |
            export KUBECONFIG="{{ xtoph_ocp4.ocp.creds_dir }}/auth/kubeconfig"
            {{ oc_cmd }} apply -f /usr/local/etc/workshop-registryPV.yaml
            {{ oc_cmd }} patch configs.imageregistry.operator.openshift.io/cluster --type merge -p '{"spec":{"storage":{"pvc":{"claim":""}}}}' 
            sleep 3
            {{ oc_cmd }} patch configs.imageregistry.operator.openshift.io/cluster --type merge -p '{"spec":{"managementState":"Managed"}}'
        when: 
          - xtoph_ocp4.ocp.version is version('4.3',operator='<')
          - xtoph_ocp4.bastion.nfs == true
          - xtoph_ocp4.bastion.workshop_materials == true



      ##
      ##    Now just watch for all clusteroperators ready
      ##    There can be cases when timing is just right, that
      ##    the results of 'get clusteroperators' can show all True.
      ##    But that is harmless.  This cluster is "mostly" ready
      ##    if this exits
      ##
    
    
    
      - name: "xtoph_ocp4 : postinstall-cluster : watch until availability for all clusteroperators is 'True', approve CSRs as needed"
        run_once: true
        shell:
          cmd: |
            export KUBECONFIG={{ workshop_extras.ocp_creds_dir }}/auth/kubeconfig
            {{ oc_cmd }} get clusteroperators --no-headers | awk '{print $3}' | grep -i false 
            if [[ $? == 0 ]]; then 
              for i in `{{ oc_cmd }} get csr | grep -i pending | awk '{print $1}'`; do 
                {{ oc_cmd }} adm certificate approve $i
                sleep 1
              done
              exit 1 
            else 
              exit 0 
            fi
        register: result
        until:  result.rc == 0
        retries: 600
        delay: 5

      - name: "xtoph_ocp4 : postinstall-cluster : final CSR approval check"
        run_once: true
        shell:
          cmd: |
            export KUBECONFIG={{ workshop_extras.ocp_creds_dir }}/auth/kubeconfig
            for i in `{{ oc_cmd }} get csr | grep -i pending | awk '{print $1}'`; do
              {{ oc_cmd }} adm certificate approve $i
              sleep 1
            done
        register: result


  vars:
    - oc_cmd: "/usr/local/bin/oc"




