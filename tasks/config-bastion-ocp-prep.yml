
- delegate_to: "{{ xtoph_ocp4.bastion.host_fqdn }}"
  run_once: true
  block:

      - name: "xtoph_ocp4 : config-bastion-ocp-prep : Create ssh directory"
        file:
          path: /root/.ssh
          mode: "0700"
          state: directory
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : test ssh key"
        stat: path="/root/.ssh/id_rsa.pub"
        register: test_ssh_key
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : create ssh key"
        command: "ssh-keygen -t rsa -b 2048 -N '' -f /root/.ssh/id_rsa"
        when: test_ssh_key.stat.exists == false
      


      - block:

            # 
            #    Clean up installation artifacts
            #

            - name: "xtoph_ocp4 : config-bastion-ocp-prep : Back-up openshift installation artifacts in {{ xtoph_ocp4.ocp.creds_dir }}"
              shell:
                cmd: |
                  if [[ -d "{{ xtoph_ocp4.ocp.creds_dir }}" ]]; 
                    then mv -f "{{ xtoph_ocp4.ocp.creds_dir }}" "{{ xtoph_ocp4.ocp.creds_dir }}".`date +"%Y%m%d-%R"`
                  fi
                removes: "{{ xtoph_ocp4.ocp.creds_dir }}"
        
            - name: "xtoph_ocp4 : config-bastion-ocp-prep : Clean-up kube artifacts in /root/.kube"
              file:
                path: "/root/.kube"
                state: absent
        
            - name: "xtoph_ocp4 : config-bastion-ocp-prep : Create openshift working directory {{ xtoph_ocp4.ocp.creds_dir }}"
              file:
                path: "{{ item }}"
                mode: "0755"
                state: directory
              with_items:
                - "{{ xtoph_ocp4.ocp.creds_dir }}"
                - "{{ xtoph_ocp4.ocp.creds_dir }}/auth"

        when: workshop_lock == false
          

      #
      #    Track down offline token, fail if assisted_installer == true and !-exist
      #

      - name: "xtoph_ocp4 : config-bastion-ocp-prep : hunt for ocm offline token"
        copy:
          src:   "{{ item }}" 
          dest:  "{{ xtoph_ocp4.ocp.creds_dir }}/ocm-token.txt"
          mode:  "0644"
          owner: root
          group: root
        ignore_errors: yes
        with_items:
          - "../config/ocm-token.txt"
          - "/root/{{ xtoph_ocp4.ocp.clustername }}-ocm-token.txt"
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : confirm ocm offline token"
        stat: path="{{ xtoph_ocp4.ocp.creds_dir }}/ocm-token.txt"
        register: token_check
     
      - block:
            - debug: 
                msg:
                  - "ATTENTION: OFFLINE OCM-TOKEN REQUIRED FOR ASSISTED INSTALL SERVICES"
                  - "Retrieve offline ocm-token here: https://cloud.redhat.com/openshift/token "
                  - "Save offline ocm-token here: {{ inventory_dir }}/ocm-token.txt"
            - fail:  msg="MISSING OCM OFFLINE TOKEN"
        when: 
          - xtoph_ocp4.bastion.assisted_installer == true
          - token_check.stat.exists == false



      #
      #    Track down the pull secret
      #
      #      pull_secret may already be deployed
      #        OR
      #      if ocm-token exists we can try to retrieve it from redhat.com
      #        OR
      #      this is a manual step user must complete as pre-work
      #
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : hunt for pull-secret"
        copy:
          src:   "{{ item }}" 
          dest:  "{{ xtoph_ocp4.ocp.creds_dir }}/pull-secret.txt"
          mode:  "0644"
          owner: root
          group: root
        ignore_errors: yes
        with_items:
          - "{{ inventory_dir }}/pull-secret.txt" 
          - "/root/{{ xtoph_ocp4.ocp.clustername }}-pull-secret.txt" 
        
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : confirm pull-secret"
        stat: path="{{ xtoph_ocp4.ocp.creds_dir }}/pull-secret.txt"
        register: secret_check


      - block:

            - name: "xtoph_ocp4 : config-bastion-ocp-prep : (re)fresh access token using offline token"
              ansible.builtin.uri:
                body:
                  client_id:     "cloud-services"
                  grant_type:    "refresh_token"
                  refresh_token: "{{ lookup('file', inventory_dir ~ '/ocm-token.txt') }}"
                body_format: form-urlencoded
                method: POST
                url: "{{ redhat_sso_url }}"
              register: access_token

            - debug: var=access_token

            - name: "xtoph_ocp4 : config-bastion-ocp-prep : fetch pull-secret from redhat.com"
              ansible.builtin.uri:
                follow_redirects: none
                headers:
                  Authorization: "Bearer {{ access_token.json.access_token }}"
                  accept: "application/json"
                method: POST
                status_code: 200
                url: "{{ redhat_ocp_url }}"
              register: secret_fetch

            - debug: var=secret_fetch

            - copy:
                content: "{{ secret_fetch.json }}" 
                dest:    "{{ xtoph_ocp4.ocp.creds_dir }}/pull-secret.txt"
                mode:    "640"

            - name: "xtoph_ocp4 : config-bastion-ocp-prep : confirm pull-secret again"
              stat: path="{{ xtoph_ocp4.ocp.creds_dir }}/pull-secret.txt"
              register: secret_check_again

        vars:
          redhat_ocp_url: "https://api.openshift.com/api/accounts_mgmt/v1/access_token"
          redhat_sso_url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"

        when:
         - secret_check.stat.exists == false
         - token_check.stat.exists == true
  
      - block:
            - debug: 
                msg:
                  - "ATTENTION: PULL-SECRET REQUIRED FOR OPENSHIFT DEPLOYMENT"
                  - ""
                  - "     NOTE: If you create an ocm-token, the pull-secret can get automatically"
                  - "           pulled from redhat.com, otherwise you need to get it manually"
                  - ""
                  - "Retrieve pull-secret here: https://cloud.redhat.com/openshift/token "
                  - "Save pull-secret here: {{ inventory_dir }}/pull-secret.txt"

            - debug: msg="RETRIEVE PULL-SECRET https://cloud.redhat.com/openshift/install/metal/user-provisioned"
            - debug: msg="SAVE PULL-SECRET HERE ./config/pull-secret.txt"
            - fail:  msg="MISSING PULL-SECRET"

        when: 
            ##    When registering a result to a skipped task, the result shows 'skipped' and 
            ##    not the result of stat.  Thus we need some default() evals
          - secret_check.stat.exists == false | default(false) 
          - secret_check_again.stat.exists == false | default(false) 
      

        
      #
      #    Install OCP Client software
      #

      - name: "xtoph_ocp4 : config-bastion-ocp-prep : download ocp client software [SRC: {{ xtoph_ocp4.ocp_assets.url }}]"
        environment:
          http_proxy:  "{{ xtoph_ocp4.ocp.http_proxy| default('') }}"
          https_proxy: "{{ xtoph_ocp4.ocp.https_proxy| default('') }}"
        get_url:
          url: "{{ xtoph_ocp4.ocp_assets.url }}/{{ item }}"
          dest: "/usr/local/src/{{ item }}"
          mode: "0644"
        with_items:
          - "{{ xtoph_ocp4.ocp_assets.client_tar }}"
        register: openshift_download
        until: openshift_download is not failed
        retries: 5
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : unpack ocp client software"
        shell:
          cmd: |
            cd /usr/local/bin
            tar zxvf /usr/local/src/{{ item }}
        with_items:
          - "{{ xtoph_ocp4.ocp_assets.client_tar }}"
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : additional package installation"
        yum: name=bash-completion state=installed
      
      - name: "xtoph_ocp4 : config-bastion-ocp-prep : configure ocp client bash completion"
        shell: 
          cmd: |
            /usr/local/bin/oc completion bash >> /etc/bash_completion.d/oc_completion



